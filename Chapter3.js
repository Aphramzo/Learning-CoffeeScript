// Generated by CoffeeScript 1.6.3
(function() {
  var alphabet, count, fs, grid, isWord, letter, numberOfTiles, owl2, randomLetter, totalTiles, word, wordList, x, y, _i, _len,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  owl2 = fs.readFileSync('OWL2.txt', 'utf8');

  wordList = owl2.match(/^(\w+)/mg);

  wordList = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = wordList.length; _i < _len; _i++) {
      word = wordList[_i];
      if (word.length <= GRIDSIZE) {
        _results.push(word);
      }
    }
    return _results;
  })();

  isWord = function(str) {
    return __indexOf.call(wordList, str) >= 0;
  };

  numberOfTiles = {
    A: 9,
    B: 2,
    C: 2,
    D: 4,
    E: 12,
    F: 2,
    G: 3,
    H: 2,
    I: 9,
    J: 1,
    K: 1,
    L: 4,
    M: 2,
    N: 6,
    O: 8,
    P: 2,
    Q: 1,
    R: 6,
    S: 4,
    T: 6,
    U: 4,
    V: 2,
    W: 2,
    X: 1,
    Y: 2,
    Z: 1
  };

  totalTiles = 0;

  for (count = _i = 0, _len = numberOfTiles.length; _i < _len; count = ++_i) {
    letter = numberOfTiles[count];
    totalTiles += count;
  }

  alphabet = ((function() {
    var _results;
    _results = [];
    for (letter in numberOfTiles) {
      _results.push(letter);
    }
    return _results;
  })()).sort();

  randomLetter = function() {
    var randomNumber, x, _j, _len1;
    randomNumber = Math.ceil(Math.random() * totalTiles);
    x = 1;
    for (_j = 0, _len1 = alphabet.length; _j < _len1; _j++) {
      letter = alphabet[_j];
      x += numberOfTiles[letter];
      if (x > randomNumber) {
        return letter;
      }
    }
  };

  grid = (function() {
    var _j, _results;
    _results = [];
    for (x = _j = 0; 0 <= GRIDSIZE ? _j < GRIDSIZE : _j > GRIDSIZE; x = 0 <= GRIDSIZE ? ++_j : --_j) {
      _results.push((function() {
        var _k, _results1;
        _results1 = [];
        for (y = _k = 0; 0 <= GRIDSIZE ? _k < GRIDSIZE : _k > GRIDSIZE; y = 0 <= GRIDSIZE ? ++_k : --_k) {
          _results1.push(randomLetter());
        }
        return _results1;
      })());
    }
    return _results;
  })();

}).call(this);
